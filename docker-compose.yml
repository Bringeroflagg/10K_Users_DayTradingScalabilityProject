services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "80:80"  
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - auth_service
            - order_service
        networks:
            - backend
    auth_service:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/usr/src/app
        ports:
            - "8000:8000"
        depends_on:
            - db
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=db
            - DB_PORT=5432
            - DB_NAME=authdb
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    db:
        image: postgres:13
        container_name: postgres_db
        environment:
            POSTGRES_DB: authdb
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: adminpassword
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - backend

    order_service:
        build:
            context: .
            dockerfile: OrderService/Dockerfile
        volumes:
            - ./OrderService:/app
        ports:
            - "5200:5200"         # Expose Order Service on port 5200
        depends_on:
            - matching_engine_service
        environment:
            - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
            - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
        networks:
            - backend

    matching_engine_service:
        build:
            context: .
            dockerfile: MatchingEngineService/Dockerfile
        volumes:
            - ./MatchingEngineService:/app
        ports:
            - "5300:5300"         # Expose Matching Engine on port 5300
        networks:
            - backend

    # New MongoDB service to be used by PortfolioStockService and other microservices
    mongo:
        image: mongo:6.0
        container_name: mongo_db
        restart: always
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: adminpassword
        networks:
            - backend

    # Added PortfolioStockService microservice
    portfolio_stock_service:
        build:
            context: ./PortfolioStockService
        volumes:
            - ./PortfolioStockService:/app
        ports:
            - "5000:5000"
        depends_on:
            - mongo
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system
        networks:
            - backend

networks:
    backend:

volumes:
    pgdata:
    mongodb_data:
    mongodbdata:


services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "80:80"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - order_service
        networks:
            - backend

    redis:
        image: redis:latest
        container_name: redis_cache
        restart: always
        ports:
            - "6379:6379"
        networks:
            - backend

    db:
        image: postgres:13
        container_name: postgres_db
        environment:
            POSTGRES_DB: authdb
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: adminpassword
            POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS: 4
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - backend
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "authdb"]
            interval: 5s
            timeout: 5s
            retries: 10
        command: #Might change it, just for load testing
            [
                "postgres",
                "-c",
                "max_connections=2000", # Increase connections for high concurrency
                "-c",
                "shared_buffers=512MB", # Use more memory for caching
                "-c",
                "work_mem=64MB", # Allocate more memory per operation
                "-c",
                "effective_cache_size=1GB", # More cache for better query performance
                "-c",
                "synchronous_commit=off", # Improves performance (only for testing!)
                "-c",
                "fsync=off", # Disables disk sync (unsafe, but boosts speed)
            ]

    pgbouncer:
        image: edoburu/pgbouncer
        container_name: pgbouncer
        restart: always
        depends_on:
            db:
                condition: service_healthy
        volumes:
            - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        environment:
            - DB_HOST=db
            - DATABASES=authdb=host=db port=5432 user=admin password=adminpassword pool_size=100
        ports:
            - "6432:6432" # Expose PgBouncer on port 6432
        networks:
            - backend

    auth_service1:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8001:8000"
        depends_on:
            db:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=db
            - DB_PORT=5432
            - DB_NAME=authdb
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service2:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8002:8000"
        depends_on:
            db:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=db
            - DB_PORT=5432
            - DB_NAME=authdb
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service3:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8003:8000"
        depends_on:
            db:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=db
            - DB_PORT=5432
            - DB_NAME=authdb
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    order_service:
        build:
            context: .
            dockerfile: OrderService/Dockerfile
        volumes:
            - ./OrderService:/app
        ports:
            - "5200:5200" # Expose Order Service on port 5200
        depends_on:
            matching_engine_service:
                condition: service_started
            mongo:
                condition: service_healthy
        environment:
            - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
            - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin

        networks:
            - backend

    matching_engine_service:
        build:
            context: .
            dockerfile: MatchingEngineService/Dockerfile
        volumes:
            - ./MatchingEngineService:/app
        ports:
            - "5300:5300" # Expose Matching Engine on port 5300
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    # New MongoDB service to be used by PortfolioStockService and other microservices
    mongo:
        image: mongo:6.0
        container_name: mongo_db
        restart: always
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: adminpassword
        networks:
            - backend
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
            interval: 10s
            timeout: 5s
            retries: 5

    portfolio_stock_service:
        build:
            context: ./PortfolioStockService
        volumes:
            - ./PortfolioStockService:/app
        ports:
            - "5000:5000"
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

networks:
    backend:

volumes:
    pgdata:
    mongodb_data:
    mongodbdata:

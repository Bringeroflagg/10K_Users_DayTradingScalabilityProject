services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "8080:8080"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - order_service
            - matching_engine_service
            - portfolio_stock_service
        networks:
            - backend

    redis:
        image: redis:latest
        container_name: redis_cache
        command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru
        restart: always
        ports:
            - "6381:6379"
        networks:
            - backend

    redis_wallet_cache:
        image: redis:latest
        container_name: redis_wallet_cache
        command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
        restart: always
        ports:
            - "6382:6379"
        networks:
            - backend

    db1:
        image: postgres:13
        container_name: postgres_db1
        environment:
            POSTGRES_DB: authdb1
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: adminpassword
        ports:
            - "5433:5432"
        volumes:
            - pgdata1:/var/lib/postgresql/data
        networks:
            - backend
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "authdb1"]
            interval: 5s
            timeout: 5s
            retries: 10
        command: [
                "postgres",
                "-c",
                "max_connections=500", # Reduced this value
                "-c",
                "shared_buffers=1GB", # Reduced this value
                "-c",
                "work_mem=8MB", # Reduced this value
                "-c",
                "effective_cache_size=2GB", # Reduced this value
                "-c",
                "synchronous_commit=off", # Improves performance (only for testing!)
                "-c",
                "fsync=off", # Disables disk sync (unsafe, but boosts speed)
            ]

    pgbouncer_db1:
        image: edoburu/pgbouncer
        container_name: pgbouncer_db1
        restart: always
        depends_on:
            db1:
                condition: service_healthy
        volumes:
            - ./pgbouncer/pgbouncer_db1.ini:/etc/pgbouncer/pgbouncer.ini:ro
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        environment:
            - DB_HOST=db1
            - DATABASES=authdb1=host=db1 port=5432 user=admin password=adminpassword pool_size=100
        ports:
            - "6433:6432"
        networks:
            - backend
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-U",
                    "admin",
                    "-h",
                    "localhost",
                    "-p",
                    "6432",
                ]
            interval: 5s
            timeout: 3s
            retries: 10

    pgbouncer_db2:
        image: edoburu/pgbouncer
        container_name: pgbouncer_db2
        restart: always
        depends_on:
            db2:
                condition: service_healthy
        volumes:
            - ./pgbouncer/pgbouncer_db2.ini:/etc/pgbouncer/pgbouncer.ini
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        environment:
            - DB_HOST=db2
            - DATABASES=authdb2=host=db2 port=5432 user=admin password=adminpassword pool_size=100
        ports:
            - "6434:6432"
        networks:
            - backend
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-U",
                    "admin",
                    "-h",
                    "localhost",
                    "-p",
                    "6432",
                ]
            interval: 5s
            timeout: 3s
            retries: 10

    pgbouncer_db3:
        image: edoburu/pgbouncer
        container_name: pgbouncer_db3
        restart: always
        depends_on:
            db3:
                condition: service_healthy
        volumes:
            - ./pgbouncer/pgbouncer_db3.ini:/etc/pgbouncer/pgbouncer.ini
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        environment:
            - DB_HOST=db3
            - DATABASES=authdb3=host=db3 port=5432 user=admin password=adminpassword pool_size=100
        ports:
            - "6435:6432"
        networks:
            - backend
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-U",
                    "admin",
                    "-h",
                    "localhost",
                    "-p",
                    "6432",
                ]
            interval: 5s
            timeout: 3s
            retries: 10

    pgbouncer_db4:
        image: edoburu/pgbouncer
        container_name: pgbouncer_db4
        restart: always
        depends_on:
            db4:
                condition: service_healthy
        volumes:
            - ./pgbouncer/pgbouncer_db4.ini:/etc/pgbouncer/pgbouncer.ini
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        environment:
            - DB_HOST=db4
            - DATABASES=authdb4=host=db4 port=5432 user=admin password=adminpassword pool_size=100
        ports:
            - "6436:6432"
        networks:
            - backend
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-U",
                    "admin",
                    "-h",
                    "localhost",
                    "-p",
                    "6432",
                ]
            interval: 5s
            timeout: 3s
            retries: 10

    pgbouncer_db5:
        image: edoburu/pgbouncer
        container_name: pgbouncer_db5
        restart: always
        depends_on:
            db5:
                condition: service_healthy
        volumes:
            - ./pgbouncer/pgbouncer_db5.ini:/etc/pgbouncer/pgbouncer.ini
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        environment:
            - DB_HOST=db5
            - DATABASES=authdb5=host=db5 port=5432 user=admin password=adminpassword pool_size=100
        ports:
            - "6437:6432"
        networks:
            - backend
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-U",
                    "admin",
                    "-h",
                    "localhost",
                    "-p",
                    "6432",
                ]
            interval: 5s
            timeout: 3s
            retries: 10

    auth_load_balancer1:
        build:
            context: .
            dockerfile: auth_load_balancer/Dockerfile
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - auth_service4
            - auth_service5
            - auth_service6
            - auth_service7
            - auth_service8
            - auth_service9
            - auth_service10
        ports:
            - "5001:5001"
        networks:
            - backend

    auth_load_balancer2:
        build:
            context: .
            dockerfile: auth_load_balancer/Dockerfile
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - auth_service4
            - auth_service5
            - auth_service6
            - auth_service7
            - auth_service8
            - auth_service9
            - auth_service10
        ports:
            - "5002:5001" # Expose another instance on port 5002
        networks:
            - backend

    auth_load_balancer3:
        build:
            context: .
            dockerfile: auth_load_balancer/Dockerfile
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - auth_service4
            - auth_service5
            - auth_service6
            - auth_service7
            - auth_service8
            - auth_service9
            - auth_service10
        ports:
            - "5003:5001" # Expose another instance on port 5003
        networks:
            - backend

    auth_service1:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8004:8000"
        depends_on:
            pgbouncer_db1:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=pgbouncer_db1
            - DB_PORT=6432
            - DB_NAME=authdb1
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service2:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8005:8000"
        depends_on:
            pgbouncer_db2:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=pgbouncer_db2
            - DB_PORT=6432
            - DB_NAME=authdb2
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service3:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8006:8000"
        depends_on:
            pgbouncer_db3:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=pgbouncer_db3
            - DB_PORT=6432
            - DB_NAME=authdb3
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service4:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8007:8000"
        depends_on:
            pgbouncer_db4:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=pgbouncer_db4
            - DB_PORT=6432
            - DB_NAME=authdb4
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service5:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8008:8000"
        depends_on:
            pgbouncer_db5:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=pgbouncer_db5
            - DB_PORT=6432
            - DB_NAME=authdb5
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service6:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8009:8000"
        depends_on:
            pgbouncer_db1:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=pgbouncer_db1
            - DB_PORT=6432
            - DB_NAME=authdb1
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service7:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8010:8000"
        depends_on:
            pgbouncer_db2:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=pgbouncer_db2
            - DB_PORT=6432
            - DB_NAME=authdb2
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service8:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8011:8000"
        depends_on:
            pgbouncer_db3:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=pgbouncer_db3
            - DB_PORT=6432
            - DB_NAME=authdb3
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service9:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8012:8000"
        depends_on:
            pgbouncer_db4:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=pgbouncer_db4
            - DB_PORT=6432
            - DB_NAME=authdb4
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service10:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8013:8000"
        depends_on:
            pgbouncer_db5:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173 #Maybe
            - DB_HOST=pgbouncer_db5
            - DB_PORT=6432
            - DB_NAME=authdb5
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    order_service:
        build:
            context: .
            dockerfile: OrderService/Dockerfile
        volumes:
            - ./OrderService:/app
        ports:
            - "5201:5200" # Expose Order Service on port 5200
        depends_on:
            matching_engine_service:
                condition: service_started
            mongo:
                condition: service_healthy
        environment:
            - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
            - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
            - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin

        networks:
            - backend

    matching_engine_service:
        build:
            context: .
            dockerfile: MatchingEngineService/Dockerfile
        volumes:
            - ./MatchingEngineService:/app
        ports:
            - "5301:5300" # Expose Matching Engine on port 5300
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    # New MongoDB service to be used by PortfolioStockService and other microservices
    mongo:
        image: mongo:6.0
        container_name: mongo_db
        restart: always
        ports:
            - "27018:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: adminpassword
        networks:
            - backend
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
            interval: 10s
            timeout: 5s
            retries: 5

    portfolio_stock_service:
        build:
            context: ./PortfolioStockService
        volumes:
            - ./PortfolioStockService:/app
        ports:
            - "5005:5000"
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

networks:
    backend:

volumes:
    pgdata1:
    pgdata2:
    pgdata3:
    pgdata4:
    pgdata5:
    mongodb_data:
    mongodbdata:
